{"version":3,"sources":["Utils/Config.ts","Utils/History.ts","Network/index.ts","components/ComingSoonComponent/ComingSoonComponent.js","App.tsx","serviceWorker.ts","index.tsx","Assets/Images/woman.png"],"names":["baseUrl","process","REACT_APP_ENVIRONMENT","history","createHashHistory","http","Axios","create","baseURL","headers","Authorization","localStorage","getItem","login","params","url","post","then","res","data","catch","reason","console","error","message","token","setItem","defaults","interceptors","request","use","config","push","Promise","reject","response","log","ComingSoonComponent","className","icon","faUser","src","imgHome","alt","title","App","useEffect","username","password","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yKAEaA,GAAUC,8CAAYC,sBAFtB,+B,QCEEC,EADCC,cCGVC,EAAOC,IAAMC,OAAO,CACxBC,QAASR,EACTS,QAAS,CAACC,cAAe,UAAYC,aAAaC,QAAQ,YAQrD,SAASC,EAAMC,IAgDf,SAAcC,EAAaD,GAChC,OAAOT,EACJW,KAAKD,EAAKD,GACVG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,EAAOG,aApDzBR,CAAK,QAASF,GAAQG,MAAK,SAACC,GALvB,IAAwBO,EAMvBP,GAAOA,EAAIO,QACbd,aAAae,QAAQ,QAASR,EAAIO,OAPTA,EAQVP,EAAIO,MAPvBpB,EAAKsB,SAASlB,QAAU,CAACC,cAAe,UAAYe,OAYtDpB,EAAKuB,aAAaC,QAAQC,KACxB,SAAUC,GAER,OAAOA,KAET,SAAUR,GAKR,OADApB,EAAQ6B,KAAK,KACNC,QAAQC,OAAOX,MAI1BlB,EAAKuB,aAAaO,SAASL,KACzB,SAAUK,GAER,OAAOA,KAET,SAAUZ,GAKR,OAHAD,QAAQc,IAAIb,GAEZpB,EAAQ6B,KAAK,KACNC,QAAQC,OAAOX,M,qCCHXc,G,MAtCa,WAC1B,OACE,yBAAKC,UAAU,wBACb,wBAAIA,UAAU,mCACZ,kBAAC,IAAD,CAAiBC,KAAMC,IAAQF,UAAU,SAD3C,YAKA,yBAAKA,UAAU,WAAWG,IAAKC,IAASC,IAAI,KAE5C,yBAAKL,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,0BAAd,kBAAsD,6BAAtD,yBACA,uBAAGA,UAAU,+BAAb,6CAAqF,6BAArF,yDAKJ,yBAAKA,UAAU,kDAEb,uBAAGA,UAAU,kDACX,uBAAGM,MAAM,YAAYN,UAAU,qBAEjC,uBAAGA,UAAU,kDACX,uBAAGM,MAAM,UAAUN,UAAU,mBAE/B,uBAAGA,UAAU,kDACX,uBAAGM,MAAM,WAAWN,UAAU,yBCH3BO,EApBH,WAMV,OAJAC,qBAAU,WACRjC,EAAM,CAACkC,SAAU,mBAAoBC,SAAU,WAC9C,IAGD,kBAAC,EAAD,OCNgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,iB,mBE3InBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.6ced5da6.chunk.js","sourcesContent":["const PROD = 'https://dev-ngn.mrreset.com';\nconst QA = 'https://dev-ngn.mrreset.com';\nexport const baseUrl = process.env.REACT_APP_ENVIRONMENT === 'PROD' ? PROD : QA;\n","import { createHashHistory } from 'history';\nconst history = createHashHistory();\nexport default history;\n","import Axios from \"axios\";\nimport {baseUrl} from \"../Utils/Config\";\nimport history from \"../Utils/History\";\n\nconst http = Axios.create({\n  baseURL: baseUrl,\n  headers: {Authorization: \"Bearer \" + localStorage.getItem('token')}\n});\n\n\nexport function setHeaderToken(token: string) {\n  http.defaults.headers = {Authorization: \"Bearer \" + token};\n}\n\nexport function login(params: any): any {\n  post(\"login\", params).then((res: any) => {\n    if (res && res.token) {\n      localStorage.setItem('token', res.token);\n      setHeaderToken(res.token)\n    }\n  });\n}\n\nhttp.interceptors.request.use(\n  function (config) {\n    // Do something before request is sent\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    // toast('Error with the server', 'error');\n    // localStorage.removeItem('token');\n    history.push(\"/\");\n    return Promise.reject(error);\n  }\n);\n// Add a response interceptor\nhttp.interceptors.response.use(\n  function (response) {\n    // Do something with response data\n    return response;\n  },\n  function (error) {\n    // Do something with response error\n    console.log(error);\n    // localStorage.removeItem('token');\n    history.push(\"/\");\n    return Promise.reject(error);\n  }\n);\n\nexport function get(url: string, params?: any): Promise<any> {\n  return http\n    .get(url, {\n      params\n    })\n    .then(res => res.data)\n    .catch(reason => {\n      console.error(reason.message);\n    });\n}\n\nexport function post(url: string, params?: any): Promise<any> {\n  return http\n    .post(url, params)\n    .then(res => res.data)\n    .catch(reason => {\n      console.error(reason.message);\n    });\n}\n\nexport function put(url: string, params?: any): Promise<any> {\n  return http\n    .put(url, params)\n    .then(res => res.data)\n    .catch(reason => {\n      console.error(reason.message);\n    });\n}\n\nexport function deleteReq(url: string, params?: any): Promise<any> {\n  return http\n    .delete(url, params)\n    .then(res => res.data)\n    .catch(reason => {\n      console.error(reason.message);\n    });\n}\n","import React from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\";\nimport imgHome from \"../../Assets/Images/woman.png\";\nimport \"./ComingSoonComponent.scss\";\n\nconst ComingSoonComponent = () => {\n  return (\n    <div className=\"content-front vh-100\">\n      <h4 className=\"your-case-logo font-weight-bold\">\n        <FontAwesomeIcon icon={faUser} className=\"mr-1\"/>\n        YourCase\n      </h4>\n\n      <img className=\"img-home\" src={imgHome} alt=\"\"/>\n\n      <div className=\"row m-0\">\n        <div className=\"col-lg-8\">\n          <div className=\"text-center ptp-20\">\n            <h1 className=\"title font-weight-bold\">Hey everybody! <br/> We're coming soon...</h1>\n            <p className=\"subtitle font-weight-bolder\">We're coming soon! To tell us your cases. <br/>\n              We're working hard to give you the best experience.</p>\n          </div>\n\n        </div>\n        <div className=\"col-lg-12 ptp-10 d-flex justify-content-center\">\n\n          <a className=\"circle-item pointer-event text-decoration-none\">\n            <i title=\"Instagram\" className=\"fa fa-instagram\">{}</i>\n          </a>\n          <a className=\"circle-item pointer-event text-decoration-none\">\n            <i title=\"Twitter\" className=\"fa fa-twitter\">{}</i>\n          </a>\n          <a className=\"circle-item pointer-event text-decoration-none\">\n            <i title=\"Linkedin\" className=\"fa fa-linkedin\">{}</i>\n          </a>\n\n        </div>\n      </div>\n    </div>\n  )\n};\n\n\nexport default ComingSoonComponent;","import React, {useEffect} from 'react';\nimport Routes from './Routes'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport {login} from \"./Network\";\nimport ComingSoonComponent from \"./components/ComingSoonComponent/ComingSoonComponent\";\n\n\nconst App = () => {\n\n  useEffect(() => {\n    login({username: 'hans@allcode.com', password: 'wpwd'});\n  }, []);\n\n  return (\n    <ComingSoonComponent/>\n    // <Router>\n    //   <Switch>\n    //     {Routes.map(r => (\n    //       <Route exact key={r.id} path={r.path}>\n    //         <r.component />\n    //       </Route>)\n    //     )}\n    //   </Switch>\n    // </Router>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/woman.72b3515a.png\";"],"sourceRoot":""}